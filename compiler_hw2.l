/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE
enum dataType{ numInt, numFloat32, numString };
int commentLine;
%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { printf("ADD\n");return ADD; }
"-" 	{ printf("SUB\n");return SUB; }
"*" 	{ printf("MUL\n");return MUL; }
"/" 	{ printf("DIV\n");return DIV; }
"%"     { printf("MOD\n");return MOD; }
"++"    { printf("INCRE\n");return INCRE; }
"--"    { printf("DECRE\n");return DECRE; }

 /* Relational */
">"		{ return LARGER; }
"<"		{ return SMALLER; }
">="	{ return EQ_LARGER; }
"<="	{ return EQ_SMALLER; }
"=="	{ return EQUAL; }
"!="	{ return NOT_EQUAL; }

 /* Assignment */
"="		{ return ASSIGN; }
"+="	{ }
"-="	{ }
"*="	{ }
"/="	{ }
"%="	{ }

 /* Logical */
"&&"	{ }
"||"	{ }
"!"		{ }

 /* Delimiters */
"("		{ return LB; }
")"		{ return RB; }
"{"		{ return LCB; }
"}"		{ return RCB; }

 /* Print Keywords */	
"print"		{ return PRINT; }
"println"	{ return PRINTLN; }

 /* Condition and Loop Keywords */
"if"		{ }
"else"		{ }
"for"		{ }

 /* Declaration Keywords */
"var"		{ return VAR; }
"void"		{ return (VOID); }
"int"		{ yylval.i_val=numInt;return (INT); }
"float32"	{ yylval.i_val=numFloat32;return (FLOAT); }

 /* String Constant */
\"				        { BEGIN STRING_STATE;return QUOTE;}
<STRING_STATE>\"		{ BEGIN INITIAL;return QUOTE;}
<STRING_STATE>[^"]*		{ yylval.string=strdup(yytext);return STRING;}

 /* Number Constant */
{integer}	{ yylval.i_val=atoi(yytext);return I_CONST; }
{double}	{ yylval.f_val=atof(yytext);return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT;commentLine=1;return COMMENT_START; }
<COMMENT>[^*\n]+	{ yylval.string=strdup(yytext);return C_COMMENT; }
<COMMENT>\n			{ yylval.string=strdup(yytext);commentLine++;return C_COMMENT; }
<COMMENT>"*"		{ yylval.string=strdup(yytext);return C_COMMENT; }
<COMMENT>"*/"		{ BEGIN INITIAL;yylval.i_val=commentLine;return COMMENT_END; }

 /* C++ type Comment */
\/\/.*	{ yylval.string=strdup(yytext);return C_PLUS; }

 /* Variable ID */
 {id}       { yylval.string=strdup(yytext);return ID;}

 /* others */

[\n]		{ return NL; }
[ \t]		{ ; } /* Ignore */
[^; \t] 	{ ; } /* Ignore other charactor sets */
<<EOF>>     {  }

%%

int yywrap()
{
    return 1;
}